#!/bin/bash

# üîç Script de Verificaci√≥n de Im√°genes en Huawei Cloud
# Uso: ./scripts/check-huawei-images.sh

set -e

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

echo "üîç Verificaci√≥n de Im√°genes en Huawei Cloud SWR"
echo "=============================================="

# Configuraci√≥n
REGISTRY="swr.sa-argentina-1.myhuaweicloud.com"
ORGANIZATION="nodonorteit"
IMAGE_NAME="miconcesionaria"

# Verificar si Docker est√° instalado
if ! command -v docker &> /dev/null; then
    error "Docker no est√° instalado"
    exit 1
fi

# Verificar si estamos logueados en Huawei Cloud
log "Verificando autenticaci√≥n en Huawei Cloud..."
if ! docker info | grep -q "swr.sa-argentina-1.myhuaweicloud.com"; then
    warning "No est√°s logueado en Huawei Cloud SWR"
    echo "Ejecuta: docker login swr.sa-argentina-1.myhuaweicloud.com"
    echo "Con tus credenciales de Huawei Cloud"
    exit 1
fi

# Funci√≥n para obtener informaci√≥n de im√°genes remotas
check_remote_images() {
    log "Verificando im√°genes remotas en Huawei Cloud..."
    
    # Intentar obtener informaci√≥n de las im√°genes
    echo "üìã Im√°genes disponibles en el registro:"
    echo "======================================"
    
    # Verificar imagen latest
    if docker pull "$REGISTRY/$ORGANIZATION/$IMAGE_NAME:latest" >/dev/null 2>&1; then
        LATEST_INFO=$(docker images "$REGISTRY/$ORGANIZATION/$IMAGE_NAME:latest" --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.Size}}\t{{.CreatedAt}}")
        echo "‚úÖ Latest:"
        echo "$LATEST_INFO"
    else
        warning "No se pudo acceder a la imagen latest"
    fi
    
    # Verificar imagen staging
    if docker pull "$REGISTRY/$ORGANIZATION/$IMAGE_NAME:staging" >/dev/null 2>&1; then
        STAGING_INFO=$(docker images "$REGISTRY/$ORGANIZATION/$IMAGE_NAME:staging" --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.Size}}\t{{.CreatedAt}}")
        echo "‚úÖ Staging:"
        echo "$STAGING_INFO"
    else
        warning "No se pudo acceder a la imagen staging"
    fi
    
    # Verificar imagen dev
    if docker pull "$REGISTRY/$ORGANIZATION/$IMAGE_NAME:dev" >/dev/null 2>&1; then
        DEV_INFO=$(docker images "$REGISTRY/$ORGANIZATION/$IMAGE_NAME:dev" --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.Size}}\t{{.CreatedAt}}")
        echo "‚úÖ Dev:"
        echo "$DEV_INFO"
    else
        warning "No se pudo acceder a la imagen dev"
    fi
}

# Funci√≥n para verificar im√°genes locales
check_local_images() {
    log "Verificando im√°genes locales..."
    
    echo "üìã Im√°genes locales de MiConcesionaria:"
    echo "======================================"
    
    LOCAL_IMAGES=$(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.Size}}\t{{.CreatedAt}}" | grep -i "miconcesionaria" || echo "No se encontraron im√°genes locales")
    echo "$LOCAL_IMAGES"
}

# Funci√≥n para verificar uso de espacio
check_disk_usage() {
    log "Verificando uso de espacio en disco..."
    
    echo "üíæ Uso de espacio Docker:"
    echo "========================"
    docker system df
    
    echo -e "\nüíæ Uso de espacio en disco:"
    echo "=========================="
    df -h | grep -E "(Filesystem|/dev/)"
}

# Funci√≥n para verificar im√°genes hu√©rfanas
check_dangling_images() {
    log "Verificando im√°genes hu√©rfanas..."
    
    DANGLING_COUNT=$(docker images -f "dangling=true" -q | wc -l)
    if [ "$DANGLING_COUNT" -gt 0 ]; then
        warning "Se encontraron $DANGLING_COUNT im√°genes hu√©rfanas"
        echo "Im√°genes hu√©rfanas:"
        docker images -f "dangling=true" --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.Size}}"
    else
        echo "‚úÖ No hay im√°genes hu√©rfanas"
    fi
}

# Funci√≥n para mostrar estad√≠sticas de acumulaci√≥n
show_accumulation_stats() {
    log "Analizando acumulaci√≥n de im√°genes..."
    
    echo "üìä Estad√≠sticas de Acumulaci√≥n:"
    echo "=============================="
    
    # Contar im√°genes por tag
    LATEST_COUNT=$(docker images | grep "miconcesionaria.*latest" | wc -l)
    STAGING_COUNT=$(docker images | grep "miconcesionaria.*staging" | wc -l)
    DEV_COUNT=$(docker images | grep "miconcesionaria.*dev" | wc -l)
    TIMESTAMP_COUNT=$(docker images | grep "miconcesionaria.*[0-9]\{8\}-[0-9]\{6\}" | wc -l)
    
    echo "üìà Im√°genes por tipo:"
    echo "  - Latest: $LATEST_COUNT"
    echo "  - Staging: $STAGING_COUNT"
    echo "  - Dev: $DEV_COUNT"
    echo "  - Con timestamp: $TIMESTAMP_COUNT"
    
    # Calcular espacio total usado
    TOTAL_SIZE=$(docker images | grep "miconcesionaria" | awk '{sum+=$7} END {print sum "MB"}' 2>/dev/null || echo "No calculable")
    echo "üíæ Espacio total usado por MiConcesionaria: $TOTAL_SIZE"
    
    # Mostrar recomendaciones
    echo -e "\nüí° Recomendaciones:"
    echo "=================="
    
    if [ "$TIMESTAMP_COUNT" -gt 5 ]; then
        warning "Tienes muchas im√°genes con timestamp ($TIMESTAMP_COUNT). Considera limpiar las antiguas."
        echo "Ejecuta: ./scripts/cleanup-docker-images.sh"
    fi
    
    if [ "$DANGLING_COUNT" -gt 0 ]; then
        warning "Tienes im√°genes hu√©rfanas. Puedes eliminarlas con:"
        echo "docker image prune -f"
    fi
    
    echo "Para limpieza completa: ./scripts/cleanup-docker-images.sh"
}

# Funci√≥n para verificar pol√≠ticas de retenci√≥n
check_retention_policy() {
    log "Verificando pol√≠ticas de retenci√≥n..."
    
    echo "üìã Pol√≠tica de Retenci√≥n Actual:"
    echo "==============================="
    echo "‚úÖ Latest: Se mantiene siempre (sobrescribe la anterior)"
    echo "‚úÖ Staging: Se mantiene siempre (sobrescribe la anterior)"
    echo "‚úÖ Dev: Se mantiene siempre (sobrescribe la anterior)"
    echo "‚ö†Ô∏è Timestamp: Se acumulan sin l√≠mite (puede causar problemas)"
    
    echo -e "\nüí° Recomendaci√≥n:"
    echo "Considera implementar una pol√≠tica de retenci√≥n para im√°genes con timestamp:"
    echo "- Mantener solo las √∫ltimas 10 im√°genes con timestamp"
    echo "- Eliminar autom√°ticamente im√°genes m√°s antiguas"
}

# Funci√≥n principal
main() {
    echo "üöÄ Iniciando verificaci√≥n de im√°genes..."
    echo
    
    # Verificar im√°genes locales
    check_local_images
    echo
    
    # Verificar im√°genes remotas
    check_remote_images
    echo
    
    # Verificar im√°genes hu√©rfanas
    check_dangling_images
    echo
    
    # Verificar uso de espacio
    check_disk_usage
    echo
    
    # Mostrar estad√≠sticas de acumulaci√≥n
    show_accumulation_stats
    echo
    
    # Verificar pol√≠ticas de retenci√≥n
    check_retention_policy
    echo
    
    echo "üéâ Verificaci√≥n completada!"
    echo "üí° Para limpiar im√°genes antiguas: ./scripts/cleanup-docker-images.sh"
}

# Ejecutar funci√≥n principal
main "$@"
