#!/bin/bash

# Script de configuraci√≥n de Plesk para Mi Concesionaria
# Uso: ./scripts/configure-plesk.sh

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Funci√≥n para verificar si Plesk est√° instalado
check_plesk() {
    if [ ! -f "/usr/local/psa/version" ] && [ ! -f "/opt/psa/version" ]; then
        print_error "Plesk no parece estar instalado en este sistema"
        exit 1
    fi
    print_success "Plesk detectado"
}

# Funci√≥n para crear dominio en Plesk
create_domain() {
    print_status "Configurando dominio en Plesk..."
    
    read -p "Ingresa el nombre del dominio (ej: miconcesionaria.tudominio.com): " DOMAIN_NAME
    
    if [ -z "$DOMAIN_NAME" ]; then
        print_error "Debes ingresar un nombre de dominio"
        exit 1
    fi
    
    # Crear directorio del dominio
    DOMAIN_DIR="/var/www/vhosts/$DOMAIN_NAME"
    sudo mkdir -p $DOMAIN_DIR
    
    print_success "Dominio configurado: $DOMAIN_NAME"
}

# Funci√≥n para configurar proxy reverso
configure_proxy() {
    print_status "Configurando proxy reverso..."
    
    # Crear archivo de configuraci√≥n de Apache
    cat > /tmp/miconcesionaria-proxy.conf <<EOF
<VirtualHost *:80>
    ServerName $DOMAIN_NAME
    ServerAdmin webmaster@$DOMAIN_NAME
    
    # Proxy reverso hacia la aplicaci√≥n Docker
    ProxyPreserveHost On
    ProxyPass / http://localhost:3000/
    ProxyPassReverse / http://localhost:3000/
    
    # Headers adicionales
    RequestHeader set X-Forwarded-Proto "http"
    RequestHeader set X-Forwarded-Port "80"
    
    # Logs
    ErrorLog \${APACHE_LOG_DIR}/$DOMAIN_NAME-error.log
    CustomLog \${APACHE_LOG_DIR}/$DOMAIN_NAME-access.log combined
    
    # Configuraci√≥n de seguridad
    <Location />
        ProxyPass http://localhost:3000/
        ProxyPassReverse http://localhost:3000/
    </Location>
</VirtualHost>
EOF
    
    # Mover archivo a la configuraci√≥n de Plesk
    sudo mv /tmp/miconcesionaria-proxy.conf /etc/apache2/sites-available/$DOMAIN_NAME.conf
    
    # Habilitar sitio
    sudo a2ensite $DOMAIN_NAME
    
    # Habilitar m√≥dulos necesarios
    sudo a2enmod proxy
    sudo a2enmod proxy_http
    sudo a2enmod headers
    
    # Reiniciar Apache
    sudo systemctl reload apache2
    
    print_success "Proxy reverso configurado"
}

# Funci√≥n para configurar SSL
configure_ssl() {
    print_status "Configurando SSL..."
    
    read -p "¬øQuieres configurar SSL con Let's Encrypt? (y/n): " SSL_CHOICE
    
    if [[ $SSL_CHOICE =~ ^[Yy]$ ]]; then
        # Verificar si certbot est√° instalado
        if ! command -v certbot &> /dev/null; then
            print_status "Instalando certbot..."
            sudo apt-get update
            sudo apt-get install -y certbot python3-certbot-apache
        fi
        
        # Obtener certificado SSL
        sudo certbot --apache -d $DOMAIN_NAME --non-interactive --agree-tos --email admin@$DOMAIN_NAME
        
        # Configurar renovaci√≥n autom√°tica
        (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | crontab -
        
        print_success "SSL configurado con Let's Encrypt"
    else
        print_warning "SSL no configurado. Puedes configurarlo manualmente en Plesk"
    fi
}

# Funci√≥n para configurar backups autom√°ticos
configure_backups() {
    print_status "Configurando backups autom√°ticos..."
    
    # Crear script de backup autom√°tico
    cat > /var/www/miconcesionaria/auto-backup.sh <<'EOF'
#!/bin/bash

# Script de backup autom√°tico para Mi Concesionaria
BACKUP_DIR="/var/backups/miconcesionaria"
DATE=$(date +%Y%m%d_%H%M%S)
RETENTION_DAYS=30

# Crear directorio de backup si no existe
mkdir -p $BACKUP_DIR

# Backup de la base de datos
cd /var/www/miconcesionaria
docker-compose -f docker-compose.prod.yml exec -T db pg_dump -U postgres miconcesionaria > $BACKUP_DIR/db_backup_$DATE.sql

# Backup de archivos
tar -czf $BACKUP_DIR/files_backup_$DATE.tar.gz uploads/

# Eliminar backups antiguos (m√°s de 30 d√≠as)
find $BACKUP_DIR -name "*.sql" -mtime +$RETENTION_DAYS -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +$RETENTION_DAYS -delete

echo "Backup autom√°tico completado: $DATE" >> /var/log/miconcesionaria/backup.log
EOF
    
    chmod +x /var/www/miconcesionaria/auto-backup.sh
    
    # Agregar al crontab para backup diario a las 2 AM
    (crontab -l 2>/dev/null; echo "0 2 * * * /var/www/miconcesionaria/auto-backup.sh") | crontab -
    
    print_success "Backups autom√°ticos configurados (diario a las 2 AM)"
}

# Funci√≥n para configurar monitoreo avanzado
configure_monitoring() {
    print_status "Configurando monitoreo avanzado..."
    
    # Crear script de monitoreo con notificaciones
    cat > /var/www/miconcesionaria/monitor.sh <<'EOF'
#!/bin/bash

# Script de monitoreo avanzado para Mi Concesionaria
APP_URL="http://localhost:3000/api/health"
LOG_FILE="/var/log/miconcesionaria/monitor.log"
ALERT_FILE="/var/log/miconcesionaria/alerts.log"

# Funci√≥n para enviar alerta
send_alert() {
    echo "$(date): $1" >> $ALERT_FILE
    # Aqu√≠ puedes agregar notificaciones por email, Slack, etc.
}

# Verificar aplicaci√≥n
response=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL)

if [ $response -eq 200 ]; then
    echo "$(date): OK - Aplicaci√≥n funcionando" >> $LOG_FILE
else
    echo "$(date): ERROR - Aplicaci√≥n no responde (HTTP $response)" >> $LOG_FILE
    send_alert "Mi Concesionaria no responde (HTTP $response)"
fi

# Verificar espacio en disco
DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ $DISK_USAGE -gt 80 ]; then
    send_alert "Espacio en disco cr√≠tico: ${DISK_USAGE}%"
fi

# Verificar memoria
MEM_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
if [ $MEM_USAGE -gt 90 ]; then
    send_alert "Uso de memoria cr√≠tico: ${MEM_USAGE}%"
fi
EOF
    
    chmod +x /var/www/miconcesionaria/monitor.sh
    
    # Agregar al crontab para monitoreo cada 2 minutos
    (crontab -l 2>/dev/null; echo "*/2 * * * * /var/www/miconcesionaria/monitor.sh") | crontab -
    
    print_success "Monitoreo avanzado configurado"
}

# Funci√≥n para crear panel de control
create_control_panel() {
    print_status "Creando panel de control..."
    
    cat > /var/www/miconcesionaria/control-panel.sh <<'EOF'
#!/bin/bash

# Panel de control para Mi Concesionaria
clear
echo "üöó Panel de Control - Mi Concesionaria"
echo "======================================"
echo ""

while true; do
    echo "Selecciona una opci√≥n:"
    echo "1) Ver estado de la aplicaci√≥n"
    echo "2) Ver logs en tiempo real"
    echo "3) Crear backup manual"
    echo "4) Actualizar aplicaci√≥n"
    echo "5) Reiniciar servicios"
    echo "6) Ver estad√≠sticas del sistema"
    echo "7) Configurar variables de entorno"
    echo "8) Salir"
    echo ""
    read -p "Opci√≥n: " choice
    
    case $choice in
        1)
            echo "Estado de la aplicaci√≥n:"
            docker-compose -f docker-compose.prod.yml ps
            echo ""
            ;;
        2)
            echo "Logs en tiempo real (Ctrl+C para salir):"
            docker-compose -f docker-compose.prod.yml logs -f
            ;;
        3)
            echo "Creando backup..."
            ./maintenance.sh backup
            ;;
        4)
            echo "Actualizando aplicaci√≥n..."
            ./maintenance.sh update
            ;;
        5)
            echo "Reiniciando servicios..."
            docker-compose -f docker-compose.prod.yml restart
            ;;
        6)
            echo "Estad√≠sticas del sistema:"
            echo "Uso de CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
            echo "Uso de memoria: $(free | awk 'NR==2{printf "%.1f%%", $3*100/$2}')"
            echo "Espacio en disco: $(df / | awk 'NR==2 {print $5}')"
            echo ""
            ;;
        7)
            nano .env.production
            ;;
        8)
            echo "¬°Hasta luego!"
            exit 0
            ;;
        *)
            echo "Opci√≥n inv√°lida"
            ;;
    esac
    
    read -p "Presiona Enter para continuar..."
    clear
    echo "üöó Panel de Control - Mi Concesionaria"
    echo "======================================"
    echo ""
done
EOF
    
    chmod +x /var/www/miconcesionaria/control-panel.sh
    
    print_success "Panel de control creado: ./control-panel.sh"
}

# Funci√≥n para mostrar informaci√≥n final
show_final_info() {
    echo ""
    echo "=========================================="
    echo "üéâ CONFIGURACI√ìN DE PLESK COMPLETADA"
    echo "=========================================="
    echo ""
    echo "üåê Tu aplicaci√≥n estar√° disponible en:"
    echo "   http://$DOMAIN_NAME"
    echo ""
    echo "üìã COMANDOS √öTILES:"
    echo "‚Ä¢ Panel de control: ./control-panel.sh"
    echo "‚Ä¢ Ver logs: ./maintenance.sh logs"
    echo "‚Ä¢ Crear backup: ./maintenance.sh backup"
    echo "‚Ä¢ Actualizar: ./maintenance.sh update"
    echo "‚Ä¢ Monitoreo: ./monitor.sh"
    echo ""
    echo "üîß CONFIGURACI√ìN DE PLESK:"
    echo "‚Ä¢ Proxy reverso configurado en puerto 3000"
    echo "‚Ä¢ Logs en: /var/log/apache2/$DOMAIN_NAME-*.log"
    echo "‚Ä¢ Backups autom√°ticos diarios a las 2 AM"
    echo "‚Ä¢ Monitoreo cada 2 minutos"
    echo ""
    echo "üìä MONITOREO:"
    echo "‚Ä¢ Logs de aplicaci√≥n: /var/log/miconcesionaria/"
    echo "‚Ä¢ Alertas: /var/log/miconcesionaria/alerts.log"
    echo "‚Ä¢ Backups: /var/backups/miconcesionaria/"
    echo ""
}

# Funci√≥n principal
main() {
    echo "üîß Configurador de Plesk para Mi Concesionaria"
    echo "=============================================="
    echo ""
    
    # Verificar Plesk
    check_plesk
    
    # Cambiar al directorio de la aplicaci√≥n
    cd /var/www/miconcesionaria
    
    # Configurar dominio
    create_domain
    
    # Configurar proxy reverso
    configure_proxy
    
    # Configurar SSL
    configure_ssl
    
    # Configurar backups
    configure_backups
    
    # Configurar monitoreo
    configure_monitoring
    
    # Crear panel de control
    create_control_panel
    
    # Mostrar informaci√≥n final
    show_final_info
    
    print_success "¬°Configuraci√≥n de Plesk completada! üéâ"
}

# Ejecutar funci√≥n principal
main "$@" 