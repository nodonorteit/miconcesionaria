#!/bin/bash
set -e

echo "üîß Corrigiendo URL del logo de la empresa en el servidor..."

# Verificar si estamos en el directorio correcto
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå Error: No se encontr√≥ docker-compose.yml"
    echo "   Aseg√∫rate de estar en el directorio del proyecto"
    exit 1
fi

# Ejecutar la correcci√≥n directamente en el contenedor
echo "üìä Ejecutando correcci√≥n en el contenedor..."
docker-compose exec -T app node -e "
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function fixCompanyLogo() {
  try {
    console.log('üîß Corrigiendo URL del logo de la empresa...');
    
    // Verificar configuraci√≥n actual
    const currentConfig = await prisma.\$queryRaw\`SELECT * FROM company_config ORDER BY updatedAt DESC LIMIT 1\`;
    console.log('üìä Configuraci√≥n actual:', currentConfig[0] || 'No hay configuraci√≥n');
    
    // Actualizar la URL del logo
    const updateResult = await prisma.\$executeRaw\`UPDATE company_config SET logoUrl = '/uploads/company_logo_1754448284279_parana_automotores.jpeg', updatedAt = NOW() WHERE logoUrl = '/logo.svg' OR logoUrl IS NULL OR logoUrl = ''\`;
    console.log('‚úÖ Registros actualizados:', updateResult);
    
    // Verificar la configuraci√≥n final
    const finalConfig = await prisma.\$queryRaw\`SELECT * FROM company_config ORDER BY updatedAt DESC LIMIT 1\`;
    console.log('üìä Configuraci√≥n final:', finalConfig[0]);
    console.log('üéâ Correcci√≥n completada exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.\$disconnect();
  }
}

fixCompanyLogo();
"

echo ""
echo "‚úÖ Correcci√≥n completada!"
echo ""
echo "üîÑ Reiniciando la aplicaci√≥n..."
docker-compose restart app

echo ""
echo "üìã Para verificar que funcion√≥:"
echo "   - Revisa los logs: docker-compose logs app"
echo "   - Verifica que el logo se muestre en la aplicaci√≥n"
echo "   - Confirma que la URL en la BD sea correcta" 